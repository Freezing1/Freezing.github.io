<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>centerOS7安装配置nginx</title>
      <link href="/2020/06/11/centeros7-an-zhuang-pei-zhi-nginx/"/>
      <url>/2020/06/11/centeros7-an-zhuang-pei-zhi-nginx/</url>
      
        <content type="html"><![CDATA[<p><strong>1.安装配置所需环境</strong></p><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> gcc-c++yum <span class="token function">install</span> -y pcre pcre-develyum <span class="token function">install</span> -y zlib zlib-develyum <span class="token function">install</span> -y openssl openssl-devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 下载解压缩 Nginx</strong></p><pre class="line-numbers language-bash"><code class="language-bash">1. 创建目录<span class="token function">mkdir</span> /usr/local/nginx2.下载源码包<span class="token function">wget</span> -c https://nginx.org/download/nginx-1.16.1.tar.gz 3.解压缩<span class="token function">tar</span> -zxvf nginx-1.16.1.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. 编译安装</strong></p><p>解压后进入nginx源码目录，==编译时安装ssl模块，防止后面踩坑==</p><pre class="line-numbers language-bash"><code class="language-bash">./configure --prefix<span class="token operator">=</span>/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>4. 常用命令</strong></p><p> 启动：</p><pre class="line-numbers language-bash"><code class="language-bash">nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改nginx.conf文件后检测是否合法：</p><pre class="line-numbers language-bash"><code class="language-bash">nginx -t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新加载配置文件，并重启nginx:</p><pre class="line-numbers language-bash"><code class="language-bash">nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看nginx版本和编译信息</p><pre class="line-numbers language-bash"><code class="language-bash">nginx -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu自定义Python环境</title>
      <link href="/2020/05/11/ubuntu-zi-ding-yi-python-huan-jing/"/>
      <url>/2020/05/11/ubuntu-zi-ding-yi-python-huan-jing/</url>
      
        <content type="html"><![CDATA[<p><strong>Ubuntu系统自带Python环境，但是默认版本是2.x,不满足开发需要，那么就需要自定义开发环境</strong></p><hr><h5 id="1-首先最好更新一下Ubuntu下载源，要不然一些包可能下载不到，踩坑点"><a href="#1-首先最好更新一下Ubuntu下载源，要不然一些包可能下载不到，踩坑点" class="headerlink" title="1. 首先最好更新一下Ubuntu下载源，要不然一些包可能下载不到，踩坑点"></a>1. 首先最好更新一下Ubuntu下载源，要不然一些包可能下载不到，踩坑点</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt update<span class="token function">sudo</span> apt upgrade -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-安装编译Python源程序所需的包"><a href="#2-安装编译Python源程序所需的包" class="headerlink" title="2. 安装编译Python源程序所需的包"></a>2. 安装编译Python源程序所需的包</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openssl<span class="token function">sudo</span> <span class="token function">apt-get</span> libssl-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3-下载Python-源程序压缩包"><a href="#3-下载Python-源程序压缩包" class="headerlink" title="3. 下载Python 源程序压缩包"></a>3. 下载Python 源程序压缩包</h5><p>打开<a href="https://note.youdao.com/" target="_blank" rel="noopener">Python官网下载地址</a><br>选择合适的python版本，找到tgz版本的安装包，复制下载的网址路径（或者直接下载，拖拽到虚拟机里）。<br>然后执行以下命令,下载并且解压缩</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://www.python.org/ftp/python/3.7.1/Python-3.7.1.tgz<span class="token function">tar</span> -xzvf Python-3.7.1.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="4-编译安装"><a href="#4-编译安装" class="headerlink" title="4. 编译安装"></a>4. 编译安装</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> Python-3.7.1<span class="token function">sudo</span> ./configure --with-ssl<span class="token function">sudo</span> <span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-建立软连接"><a href="#5-建立软连接" class="headerlink" title="5. 建立软连接"></a>5. 建立软连接</h5><p>建立软连接之前查看目录是否正确</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 删除原有软连接</span><span class="token function">sudo</span> <span class="token function">rm</span> /user/bin/python<span class="token function">sudo</span> <span class="token function">rm</span> /user/bin/pip<span class="token comment" spellcheck="true"># 建立新的软连接（包括pip）</span><span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/bin/python3.7.1 /usr/bin/pthon<span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/bin/pip3 /usr/bin/pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-更换pip源，这里是淘宝源"><a href="#6-更换pip源，这里是淘宝源" class="headerlink" title="6.更换pip源，这里是淘宝源"></a>6.更换pip源，这里是淘宝源</h5><pre class="line-numbers language-bash"><code class="language-bash">pip <span class="token function">install</span> pip -Upip config <span class="token keyword">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>至此输入python –version你就会发现python默认版本变为Python3.7.1了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scroll、offset和client的区别</title>
      <link href="/2020/03/22/scroll-offset-he-client-de-qu-bie/"/>
      <url>/2020/03/22/scroll-offset-he-client-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h2 id="scroll、offset和client的区别"><a href="#scroll、offset和client的区别" class="headerlink" title="scroll、offset和client的区别"></a>scroll、offset和client的区别</h2><h5 id="1-clientX与clientY"><a href="#1-clientX与clientY" class="headerlink" title="1.clientX与clientY"></a>1.clientX与clientY</h5><pre><code>window.onload=function(){ document.onclick=function(ev){ var oEvent=ev||event; alert(oEvent.clientX+","+oEvent.clientY);    }}</code></pre><p>oEvent.clientX是指鼠标到可视区左边框的距离。</p><p>oEvent.clientY是指鼠标到可视区上边框的距离。</p><h5 id="2-offsetWidth、offsetHeight、offsetLeft和offsetTop"><a href="#2-offsetWidth、offsetHeight、offsetLeft和offsetTop" class="headerlink" title="2.offsetWidth、offsetHeight、offsetLeft和offsetTop"></a>2.offsetWidth、offsetHeight、offsetLeft和offsetTop</h5><pre><code>window.onload=function(){ var oDiv=document.getElementById("div1"); alert(oDiv.offsetWidth); alert(oDiv.offsetHeight); alert(oDiv.offsetLeft); alert(oDiv.offsetTop);}</code></pre><p>offsetWidth是指div的宽度（包括div的边框）</p><p>offsetHeight是指div的高度（包括div的边框）</p><p>offsetLeft是指div到整个页面左边框的距离（不包括div的边框）</p><p>offsetTop是指div到整个页面上边框的距离（不包括div的边框）</p><h5 id="3-scrollTop、scrollLeft、scrollWidth和scrollHeight"><a href="#3-scrollTop、scrollLeft、scrollWidth和scrollHeight" class="headerlink" title="3.scrollTop、scrollLeft、scrollWidth和scrollHeight"></a>3.scrollTop、scrollLeft、scrollWidth和scrollHeight</h5><p>scrollTop是指可视区顶部边框与整个页面上部边框的看不到的区域。</p><p>scrollLeft是指可视区左边边框与整个页面左边边框的看不到的区域。</p><p>scrollWidth是指左边看不到的区域加可视区加右边看不到的区域即整个页面的宽度（包括边框）</p><p>scrollHeight是指上边看不到的区域加可视区加右边看不到的区域即整个页面的高度（包括边框）</p><h5 id="4-clientWidth、clientHeight、clientLeft和clientTop"><a href="#4-clientWidth、clientHeight、clientLeft和clientTop" class="headerlink" title="4.clientWidth、clientHeight、clientLeft和clientTop"></a>4.clientWidth、clientHeight、clientLeft和clientTop</h5><p>clientWidth是指可视区的宽度。</p><p>clientHeight是指可视区的高度。</p><p>clientLeft获取左边框的宽度。</p><p>clientTop获取上边框的宽度。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS防抖和节流</title>
      <link href="/2020/02/10/js-fang-dou-he-jie-liu/"/>
      <url>/2020/02/10/js-fang-dou-he-jie-liu/</url>
      
        <content type="html"><![CDATA[<h3 id="函数防抖-debounce"><a href="#函数防抖-debounce" class="headerlink" title="函数防抖(debounce)"></a><font color="red">函数防抖(debounce)</font></h3><hr><p>概念： 在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。</p><p>生活中的实例： 如果有人进电梯（触发事件），那电梯将在10秒钟后出发（执行事件监听器），这时如果又有人进电梯了（在10秒内再次触发该事件），我们又得等10秒再出发（重新计时）。</p><p>对于函数防抖，有以下几种应用场景：</p><ul><li>给按钮加函数防抖防止表单多次提交。</li><li>对于输入框连续输入进行AJAX验证时，用函数防抖能有效减少请求次数。</li><li>判断 scroll 是否滑到底部， 滚动事件 + 函数防抖<h4 id="代码-debounce"><a href="#代码-debounce" class="headerlink" title="代码(debounce)"></a><font color="red">代码(debounce)</font></h4></li></ul><pre><code>function debounce(fn, wait) { var timer = null; return function () {  if (timer !== null) {   clearTimeout(timer);//如果多次触发将上次记录延迟清除掉  }  timer = setTimeout(function () {   fn.apply(this, arguments)  }, wait) }}// 处理函数function handle() {  console.log(Math.random());}// 事件window.addEventListener("scroll", debounce(handle, 1000)); //滚动结束一秒后打印setInterval(debounce(handle,2000),1000) // 不会触发一次（我把函数防抖看出技能读条，如果读条没完成就用技能，便会失败而且重新读条）</code></pre><h3 id="函数节流-throttle"><a href="#函数节流-throttle" class="headerlink" title="函数节流(throttle)"></a><font color="red">函数节流(throttle)</font></h3><hr><p>概念： 规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。</p><p>生活中的实例： 我们知道目前的一种说法是当 1 秒内连续播放 24 张以上的图片时，在人眼的视觉中就会形成一个连贯的动画，所以在电影的播放（以前是，现在不知道）中基本是以每秒 24 张的速度播放的，为什么不 100 张或更多是因为 24 张就可以满足人类视觉需求的时候，100 张就会显得很浪费资源。</p><p>对于函数节流，有如下几个场景：</p><ul><li>游戏中的刷新率</li><li>DOM元素拖拽</li><li>Canvas画笔功能</li></ul><h4 id="代码-throttle"><a href="#代码-throttle" class="headerlink" title="代码(throttle)"></a><font color="red">代码(throttle)</font></h4><pre><code>//时间戳方式function throttle(fn, gapTime) { let _lastTime = null; return function () { let _nowTime = + new Date() if (_nowTime - _lastTime &gt; gapTime || !_lastTime) {  fn();  _lastTime = _nowTime } }}// 处理函数let handle = ()=&gt;{ console.log(Math.random())}// 事件函数window.addEventListener('scroll',throttle(handle,1000))//定时器方式let throttle = function(func, delay) {    let timer = null;    return ()=&gt; {      if (!timer) {        timer = setTimeout(()=&gt; {          func.apply(this, arguments);          timer = null;        }, delay);      }    };  };  function handle() {    console.log(Math.random());  }  window.addEventListener("scroll", throttle(handle, 1000));</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue计算属性(computed) vs 方法 (methods)</title>
      <link href="/2020/01/03/vue-ji-suan-shu-xing-computed-vs-fang-fa-methods/"/>
      <url>/2020/01/03/vue-ji-suan-shu-xing-computed-vs-fang-fa-methods/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue计算属性-computed-vs-方法-methods"><a href="#Vue计算属性-computed-vs-方法-methods" class="headerlink" title="Vue计算属性(computed) vs 方法(methods)"></a>Vue计算属性(computed) vs 方法(methods)</h1><hr><blockquote><p>实例</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Original message: "{{ message }}"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Computed reversed message: "{{ reversedMessage }}"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#example'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">'Hello'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计算属性的 getter</span>    reversedMessage<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// `this` 指向 vm 实例</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>结果：Original message: "Hello"Computed reversed message: "olleH"</code></pre><ul><li>上述方法是通过computed达到翻转字符串的功能,但是我们可以通过在表达式中调用方法来达到同样的效果：<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Reversed message: "{{ reversedMessage() }}"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 在组件中</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>reversedMessage<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>但是不同之处在于<strong><em>计算属性是基于它们的响应式依赖进行缓存的</em></strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要<code>message</code>还没有发生改变，多次访问 <code>reversedMessage</code>计算属性会立即返回之前的计算结果，而不必再次执行函数。</li><li>这也同样意味着下面的计算属性将不再更新，因为 Date.now() 不是响应式依赖：<pre class="line-numbers language-javascript"><code class="language-javascript">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>now<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客添加豆瓣书单电影游戏页面</title>
      <link href="/2019/12/31/hexo-bo-ke-tian-jia-dou-ban-shu-dan-dian-ying-you-xi-ye-mian/"/>
      <url>/2019/12/31/hexo-bo-ke-tian-jia-dou-ban-shu-dan-dian-ying-you-xi-ye-mian/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客添加豆瓣书单电影游戏页面"><a href="#Hexo博客添加豆瓣书单电影游戏页面" class="headerlink" title="Hexo博客添加豆瓣书单电影游戏页面"></a>Hexo博客添加豆瓣书单电影游戏页面</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-douban --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>将下面的配置写入站点的配置文件 <code>_config.yml</code> 里(不是主题的配置文件).</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">douban</span><span class="token punctuation">:</span>  <span class="token key atrule">user</span><span class="token punctuation">:</span> mythsman  <span class="token key atrule">builtin</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">book</span><span class="token punctuation">:</span>    <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'This is my book title'</span>    <span class="token key atrule">quote</span><span class="token punctuation">:</span> <span class="token string">'This is my book quote'</span>  <span class="token key atrule">movie</span><span class="token punctuation">:</span>    <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'This is my movie title'</span>    <span class="token key atrule">quote</span><span class="token punctuation">:</span> <span class="token string">'This is my movie quote'</span>  <span class="token key atrule">game</span><span class="token punctuation">:</span>    <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'This is my game title'</span>    <span class="token key atrule">quote</span><span class="token punctuation">:</span> <span class="token string">'This is my game quote'</span>  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">10000 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>user</strong>: 你的豆瓣ID.打开豆瓣，登入账户，然后在右上角点击 “个人主页” ，这时候地址栏的URL大概是这样：”<a href="https://www.douban.com/people/xxxxxx/&quot;" target="_blank" rel="noopener">https://www.douban.com/people/xxxxxx/"</a> ，其中的”xxxxxx”就是你的个人ID了。</li><li><strong>builtin</strong>: 是否将生成页面的功能嵌入<code>hexo s</code>和<code>hexo g</code>中，默认是<code>false</code>。</li><li><strong>title</strong>: 该页面的标题.</li><li><strong>quote</strong>: 写在页面开头的一段话,支持html语法.</li><li><strong>timeout</strong>: 爬取数据的超时时间，默认是 10000ms ,如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。</li></ul><p>如果只想显示某一个页面(比如movie)，那就把其他的配置项注释掉即可。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用<code>hexo douban</code>命令即可生成指定页面，如果不加参数，那么默认参数为<code>-bgm</code>。</p><p><strong>需要注意的是</strong>，通常大家都喜欢用<code>hexo d</code>来作为<code>hexo deploy</code>命令的简化，但是当安装了<code>hexo douban</code>之后，就不能用<code>hexo d</code>了，因为<code>hexo douban</code>跟<code>hexo deploy</code>的前缀都是<code>hexo d</code>。</p><pre><code>$ hexo douban -hUsage: hexo doubanDescription:Generate pages from doubanOptions:  -b, --books   Generate douban books only  -g, --games   Generate douban games only  -m, --movies  Generate douban movies only</code></pre><p>如果配置了<code>builtin</code>参数为<code>true</code>，那么除了可以使用<code>hexo douban</code>命令之外，<code>hexo g</code>或<code>hexo s</code>也内嵌了生成页面的功能。</p><h2 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h2><p>如果上面的配置和操作都没问题，就可以在生成站点之后打开 <code>//yourblog/books</code> 和 <code>//yourblog/movies</code>, <code>//yourblog/games</code>, 来查看结果.</p><h2 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h2><p>如果上面的显示没有问题就可以在主题的配置文件 <code>_config.yml</code> 里添加如下配置来为这些页面添加菜单链接.</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Home</span><span class="token punctuation">:</span> /  <span class="token key atrule">Archives</span><span class="token punctuation">:</span> /archives  <span class="token key atrule">Books</span><span class="token punctuation">:</span> /books     <span class="token comment" spellcheck="true">#This is your books page</span>  <span class="token key atrule">Movies</span><span class="token punctuation">:</span> /movies   <span class="token comment" spellcheck="true">#This is your movies page</span>  <span class="token key atrule">Games</span><span class="token punctuation">:</span> /games   <span class="token comment" spellcheck="true">#This is your games page</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="适配Matery主题"><a href="#适配Matery主题" class="headerlink" title="适配Matery主题"></a>适配Matery主题</h2><p>1.在 /themes/hexo-theme-matery/layout 文件夹下面创建一个名为 douban.ejs 的文件，并将下面的内容复制进去：</p><pre class="line-numbers language-html"><code class="language-html">/* banner 部分 */<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.about-cover</span> </span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">75</span>vh<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>&lt;%- partial('_partial/bg-cover') %>/* 内容 */<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>contact<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container chip-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">0</span> <span class="token number">10</span>px <span class="token number">0</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;%= page.title %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">page.content</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.然后在博客站点目录下的node_modules文件夹下找到hexo-douban/lib，文件夹下有三个js文件，分别为：books-generator.js 、games-generator.js 、movies-generator.js，用文本编辑器打开这三个文件，并将其文件内容末尾的代码修改为一下内容：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 原文件内容为 layout: [`page`, `post`] ，将其修改为下面的内容*/</span> layout<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token string">`page`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`douban`</span></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.最后使用<code>hexo-douban</code>命令生成页面</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件安装与配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客记录</title>
      <link href="/2019/12/27/blog-mark/"/>
      <url>/2019/12/27/blog-mark/</url>
      
        <content type="html"><![CDATA[<h1 id="简短介绍"><a href="#简短介绍" class="headerlink" title="简短介绍"></a>简短介绍</h1><p>作为一名前端开发人员，早就有了自己建博客的想法，奈何技术时间有限，一直没动手，最近比较空闲，发现用博客框架搭建起来比较简单，于是研究了各种博客方案，最后准备在Wordpress和Hexo之间选一个，WordPress搭建一个博客也不难，但是要有自己的服务器，还得跑一个 MySQL，还得跑PHP……<br>去Hexo官网看了一下文档，发现简单多了，非常适合新手，最主要的几点：</p><ul><li>部署的是静态页面，不需要自己的服务器，用 github page 就能搞定</li><li>支持 Markdown 文件，直接写成md文件，再生成页面就行了</li><li>主题很多，大佬写的主题美观又耐用</li><li>命令简单，几个命令就能搭建起来，弄到 github 上也不复杂  </li></ul><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>参观了很多大佬的博客，最终选择<a href="https://blinkfox.github.io/" target="_blank" rel="noopener">闪烁之狐</a>大佬的<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a>主题，在此基础上也参考了<a href="https://sunhwee.com/" target="_blank" rel="noopener">洪卫の博客</a>的博客，博文里面有详细的主题讲解。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 和 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li></ul><h2 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h2><ul><li>修改主题颜色，解决移动端部分样式错乱问题    2019.12.23</li><li>解决首页点击开始阅读，跳转位置偏差问题      2019.12.24</li><li>合并标签和分类页  2019.12.27</li><li>加入豆瓣电影游戏页面 2019.12.29</li><li>我的简历模块加入开关  2019.12.30</li><li>主题图片压缩 2020.5.13</li><li>持续更新…</li></ul><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件安装与配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="/2019/12/23/hello-world/"/>
      <url>/2019/12/23/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><hr><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><pre class="line-numbers language-bash"><code class="language-bash">hexo new post <span class="token string">"article title"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="部署到远程"><a href="#部署到远程" class="headerlink" title="部署到远程"></a>部署到远程</h2><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件安装与配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
